package myfirstPackage

import breeze.linalg._

import breeze.stats.distributions._
import breeze.stats.DescriptiveStats._
import scala.collection.mutable.ArrayBuffer
import java.io.File


object Main {
  def main(args: Array[String]): Unit = {

    val fileName:String = args(0)
    val nothing = args(1)
    val predictionsFileName:String = args(2)

    val df = csvread(new File(fileName))
    
    val rowsNumber = df.rows
    val columnsNumber = df.columns

    split = 0.7
      
    val xTrain = df(0 to split*rowsNumber.toInt, 0 to columnsNumber-1)
    val xTest  = df(split*rowsNumber.toInt+1 to rowsNumber, 0 to columnsNumber-1)               
    
    val xTrain = df(::, 1 to columnsNumber)
    val yTest  = df(::, 1 to columnsNumber)
    
    val learningRate = 1e-7
    val numberOfIterations = 100
    
    val xTrainMatrix = DenseMatrix.horzcat(xTrain, DenseMatrix.ones[Double](xTrain.rows, 1))
    val yTrainMatrix = DenseMatrix(yTrain).t

    var beta = DenseMatrix.zeros[Double](columnsNumber+1,1)

    val trainError = DenseMatrix.zeros[Double](xTrain.rows,1)
      
    val trainMSE = 0
      
    for (iter <- 0 to numberOfIterations){
        trainError = (xTrainMatrix * beta) - yTrainMatrix

        for(i <- 0 to df.columns-1) {
          
            beta(i,0)  = beta(i,0) - learningRate / rowsNumber * sum(trainError.t * xTrainMatrix(::,i))

          }

        trainMSE  = sum(trainError.t * trainError)  /  rowsNumber
        println( s"Training_loss $trainMSE")

        }

    val validError = DenseMatrix.zeros[Double](xTest.rows,1)
    val validMSE = 0  
      
    val xTestMatrix = DenseMatrix.horzcat(xTest, DenseMatrix.ones[Double](xTest.rows, 1))
    val yTestMatrix = DenseMatrix(yTest).t
    
    val predictions = xTestMatrix * beta
    
    val validError = predictions - yTestMatrix
    
    val validMSE = sum(validError.t * validError) / (rowsNumber - split*rowsNumber.toInt+1)


    println( s"\n Validation_loss $validMSE")
    csvwrite(new File(predictionsFileName), predictions, ',')

  }
}
